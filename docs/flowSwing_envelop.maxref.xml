<?xml version='1.0' encoding='utf-8' standalone='no'?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<!--
Part of the FlowSwing package
See license.md file in the project root for full license information.
-->
<c74object name='flowSwing.envelop' category='FlowSwing'>
	<digest>NI Grid based sequencer and envelop generator</digest>
	<description>Generates automation curves and multichannel triggers for sequencing.</description>
	<discussion>
		<h4>
			<openfilelink filename="FlowSwing_overview.maxpat">FlowSwing Overview</openfilelink>
		</h4>
		FlowSwing is based on Non-Isochronous (NI) Grids. It re-shapes control signals and the timing of sequences through flexible, dynamic timing structures that go beyond traditional meter.
		At its core, FlowSwing uses a small number of parameters to define grids generated by morphing between two isochronous pulses. These Non-Isochronous Grids are made of two beat durations (Short and Long), distributed as evenly as possible over a cycle, that can be dynamically modulated during performance.
		<p>
			<o>flowSwing.envelop</o> is part of the FlowSwing package.
		</p>
	</discussion>
	<!--METADATA-->
	<metadatalist>
		<metadata name='author'>George Sioros</metadata>
		<metadata name='tag'>FlowSwing</metadata>
		<metadata name='tag'>Flow</metadata>
		<metadata name='tag'>Swing</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="signal">
			<digest>
				Playback position
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="signal">
			<digest>
				Envelop
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="signal">
			<digest>
				Multi-channel <m>mc</m> gate signal
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="Formative">
			<arglist>
				<arg name="number of beats" optional="0" type="int"/>
			</arglist>
			<digest>
				In right inlet: Sets the number of beats of the Formative pulse
			</digest>
			<description>

			</description>
		</method>
		<method name="Target">
			<arglist>
				<arg name="number of beats" optional="0" type="int" />
			</arglist>
			<digest>
				In right inlet: Sets the number of beats of the Target pulse
			</digest>
			<description>

			</description>
		</method>
		<method name="S">
			<arglist>
				<arg name="value of NI Grid parameter S" optional="0" type="float" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Controls the position of the NI Grid beats. </p>
				<p>
					For S = 0 the NI Grid beats align with the Formative pulse, for S = 1 they align with the Target pulse. Values in between will produce beat positions that are a linear interpolation between the Formative and Target pulses.
				</p>
			</description>
		</method>
		<method name="asGrid">
			<arglist>
				<arg name="values of S, rotation (R) and Target pulse of the NI Grid when locked" optional="0" type="list" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Determines the NI beat with which each breakpoint is associated</p>
				<p>
					When a pattern is locked, each breakpoint is associated with the nearest NI beat. As the location of the NI beats is determined by the values of S, rotation (R) and Target pulse, these are stored internaly so that they associations can be recreated. This message sets these values.
				</p>
			</description>
		</method>
		<method name="breakpoints">
			<arglist>
				<arg name="User defined breakpoints" optional="0" type="dict" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the breakpoint positions (before locked)</p>
				<p>
					The dictionary must contain the key <m>breakpoints</m> with a list of x y c values that determine breakpoints for the <m>function</m> object.
				</p>
			</description>
		</method>
		<method name="chans">
			<arglist>
				<arg name="Number of mc channels" optional="0" type="int" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the number of mc channels for the gate signal</p>
				<p>
					The number of <m>mc</m> channels determines the maximum number of breakpoints that can be set. Each channel produces a gate signal, which can trigger events in the corresponding channel of an <m>mc</m>-enabled synthesizer, such as <m>flowSwing.noise</m>. The gate signal takes the y-value of its associated breakpoint while the playback position is between that breakpoint and the next; otherwise, it is zero.
				</p>
				<p>The number of mc channels cannot be changed while the audio is tunred on. The default number of channels is 64.</p>
			</description>
		</method>
		<method name="firstChannel">
			<arglist>
				<arg name="Index of mc channel for the first breakpoint" optional="0" type="int" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the mc channel used for the gate signal of the first breakpoint</p>
				<p>
					All subsequent breakpoints will be assigned to the next channels in order. For example, if the first channel is set to 2, the first breakpoint will be on channel 2, the second on channel 3, and so on. The default value is 1.
				</p>
			</description>
		</method>
		<method name="lock">
			<arglist>
				<arg name="Lock state of pattern" optional="0" type="int" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the lock state of the patter</p>
				<p>
					When a pattern is locked the breakpoints are associated with the nearest NI beats, which are determined by the values of S, rotation (R), Formative and Target pulses. The breakpoints are set before locking, but they are only associated with the NI beats when the pattern is locked. 
				</p>
			</description>
		</method>
		<method name="morph">
			<arglist>
				<arg name="Morph value" optional="0" type="float" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the relative degree that each breakpoint is shifted towards its associated NI Grid beat </p>
				<p>
					When a pattern is locked, each breakpoint is associated with a nearby NI Grid beat. At <m>morph = 0</m>, breakpoints stay at their original locations. As <m>morph</m> increases toward 1, breakpoints smoothly slide toward their corresponding NI beats. At <m>morph = 1</m>, each breakpoint fully snaps to its assigned beat. Intermediate values create a gradual visual morphing between the user defined curve and the NI Grid.
				</p>
				<p>
					If multiple breakpoints are associated with the same NI beat, the closest one moves directly to that beat, while the others stretch proportionally between the surrounding beats. To force all breakpoints to align exactly with the NI Grid, set <m>morph</m> to 1.1.
				</p>

			</description>
		</method>
		<method name="mute">
			<arglist>
				<arg name="Mute state" optional="0" type="int" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the mute state</p>
				<p>
					When a FlowSwing is muted all signal outputs are zero. 
				</p>
			</description>
		</method>
		<method name="niRotation">
			<arglist>
				<arg name="Rotation (R) configuration" optional="0" type="int" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>In right inlet: Sets the rotation configuration of the NI Grid</p>
				<p>
					NI Grids are generated by shifting each beat of the Formative pulse toward either the preceding or following beat of the Target pulse. This process yields two distinct interval durations—Long and Short—which are distributed as evenly as possible across the repetition cycle.
					For example, an NI Grid with <m>F = 3</m> and <m>T = 7</m> produces one Long and two Short durations in a <m>Long-Short-Short</m> pattern. The specific rotation of this pattern depends on the shift configuration—i.e., which Formative beats are moved forward or backward toward the Target beats.
				</p>

			</description>
		</method>
		<method name="offset">
			<arglist>
				<arg name="Offset value" optional="0" type="float" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>
					In right inlet: Sets a phase offset (0–1) for the playback start position within the repetition cycle. Affects how playback aligns with other processes.
				</p>

			</description>
		</method>
		<method name="snapToNIGrid">
			<arglist>
				<arg name="SnapToNIGrid state" optional="0" type="int" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>
					In right inlet: Sets the SnapToNIGrid. When snapToGrid is on (1), breakpoints are locked to the nearest NI Grid beat. When snapToGrid is off (0), breakpoints are locked to the nearest Formative beat. The default is On.
				</p>
			</description>
		</method>
		<method name="title">
			<arglist>
				<arg name="title" optional="0" type="symbol" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>
					In right inlet: Sets the string that appears at the top left corner of the FlowSwing interface and the title bar of the window.
				</p>
			</description>
		</method>
		<method name="zoom">
			<arglist>
				<arg name="zoom" optional="0" type="float" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>
					In right inlet: The message zoom followed by a positive float value sets the zoom factor of the individual FlowSwing instance. Note that it is overwritten when the parent's zoom factor is set. 
				</p>
			</description>
		</method>
		<method name="patcher">
			<arglist>
				<arg name="patcher" optional="0" type="anything" />
			</arglist>
			<digest>
			</digest>
			<description>
				<p>
					In right inlet: The message pacther can be set to send messages to thispatcher of the FlowSwing instance. It can be used to set a bpatcher offset.
				</p>
			</description>
		</method>
		<method name="signal">
			<arglist>
			</arglist>
			<digest>
			</digest>
			<description>
				<p>
					In left inlet: The phase input signal is used to determine the playback position. It is typically  generated by a <m>phasor</m>.
				</p>
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>

	</attributelist>
	<!--RELATED-->
	<seealsolist>
		<seealso name="flowSwing_noise" />
		<seealso name="flowSwing_audioWarp" />
	</seealsolist>
	<!--INLETS/OUTLETS-->
	<misc name="Inlets">
		<entry name="Left">
			<digest>
				Playback position
			</digest>
			<description>
				<p>
					The phase input signal takes values between 0 and 1 and is used to determine the playback position. It is typically generated by a <m>phasor</m>.
				</p>
			</description>
		</entry>
		<entry name="Right">
			<digest>
				Messages to set and get parameters through the pattr system, and messages to thispatcher. 
			</digest>
			<description>
			</description>
		</entry>
	</misc>
	<misc name="Output">
		<entry name="signal">
			<description>
				<p>Out left outlet: Envelop generator based on the breakpoint function.</p>
				<p>
					Out second outlet: multi-channel <m>mc</m> signal with the gate signal for each breakpoint at a seperate channel. Each gate signal is 1 when the playback position is between the correpsodning breakpoint and next, and 0 otherwise.
				</p>
			</description>
		</entry>
		<entry name="anything">
			<description>
				<p>
					Out right outlet: Parameter changes made via the UI or by recalling a preset are sent to the right outlet. Changes received through the right inlet are not forwarded, to prevent feedback loops when two FlowSwing instances mirror each other's state.
				</p>
			</description>
		</entry>
	</misc>

</c74object>